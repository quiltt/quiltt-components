/* eslint-disable max-len */
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** Represents an ISO 8601-encoded date */
  Date: any
  /** Represents an ISO 8601-encoded datetime */
  DateTime: any
  /** Represents untyped JSON */
  JSON: any
  /** A valid URL, transported as a string */
  URL: any
}

/** Represents an Account */
export type Account = {
  __typename?: 'Account'
  /** Balance */
  balance: LedgerBalance
  /** ID */
  id: Scalars['ID']
  /** Last 4 numbers */
  lastFourDigits?: Maybe<Scalars['String']>
  /** Customizable metadata */
  metadata?: Maybe<Scalars['JSON']>
  /** Name */
  name: Scalars['String']
  /** Plaid Item account belongs to */
  plaidItem?: Maybe<PlaidItem>
  /** API Data Source */
  source?: Maybe<SourceAccounts>
  /** API Data Sources */
  sources?: Maybe<Array<SourceAccounts>>
  /** State */
  state: LedgerState
  /**
   * Status
   * @deprecated Use `state` instead.
   */
  status: LedgerStatus
  /** A limited list of transactions. Use `transactionsConnection` for a full paginated list. */
  transactions: Array<Transaction>
  /** Cursor-based pagination transactions */
  transactionsConnection: TransactionConnection
  /** Account type */
  type: AccountTypes
}

/** Represents an Account */
export type AccountSourceArgs = {
  type: SourceTypes
}

/** Represents an Account */
export type AccountSourcesArgs = {
  types?: Maybe<Array<SourceTypes>>
}

/** Represents an Account */
export type AccountTransactionsArgs = {
  filter?: Maybe<TransactionFilter>
  limit?: Scalars['Int']
  sort?: Maybe<TransactionSort>
}

/** Represents an Account */
export type AccountTransactionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  filter?: Maybe<TransactionFilter>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  sort?: Maybe<TransactionSort>
}

/** Represents the classification of an Account */
export enum AccountTypes {
  /** Checking and cash management accounts */
  Checking = 'CHECKING',
  /** Credit card accounts */
  Credit = 'CREDIT',
  /** Brokerage, retirement and other retirement accounts */
  Investment = 'INVESTMENT',
  /** Lines of credit, mortgage, student and installment loans */
  Loan = 'LOAN',
  /** All other accounts */
  Other = 'OTHER',
  /** Savings and money market accounts */
  Savings = 'SAVINGS',
}

/** Autogenerated input type of AccountUpdate */
export type AccountUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Customizable metadata */
  metadata?: Maybe<Scalars['JSON']>
}

/** Autogenerated return type of AccountUpdate */
export type AccountUpdatePayload = {
  __typename?: 'AccountUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated Account Information */
  record?: Maybe<Account>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Represents a Quiltt Category */
export type Category = {
  __typename?: 'Category'
  description?: Maybe<Scalars['String']>
  emoji?: Maybe<Scalars['String']>
  emojiName: Scalars['String']
  /** ID */
  id: Scalars['ID']
  name: Scalars['String']
}

/** Represents an Error */
export type Error = {
  __typename?: 'Error'
  /** Error Message */
  message?: Maybe<Scalars['String']>
  /** Object path for error */
  path?: Maybe<Array<Scalars['String']>>
}

/** Represents an image */
export type Image = {
  __typename?: 'Image'
  /** URL for the image */
  url?: Maybe<Scalars['URL']>
}

export type LedgerBalance = {
  __typename?: 'LedgerBalance'
  /** The amount of funds including pending transactions */
  available?: Maybe<Scalars['Float']>
  /** The amount of funds based on posted transactions */
  current?: Maybe<Scalars['Float']>
  /** Cache Key */
  id: Scalars['ID']
  /** The amount of funds that may be overdraft or spent on credit */
  limit?: Maybe<Scalars['Float']>
}

export enum LedgerState {
  /** Terminated */
  Closed = 'CLOSED',
  /** Open */
  Open = 'OPEN',
  /** Disabled */
  Paused = 'PAUSED',
}

export enum LedgerStatus {
  /** Active */
  Active = 'ACTIVE',
  /** Terminated */
  Closed = 'CLOSED',
  /** Duplicate or disabled */
  Hidden = 'HIDDEN',
  /** Automation disabled */
  Paused = 'PAUSED',
}

/** Represents a Merchant */
export type Merchant = {
  __typename?: 'Merchant'
  /** ID */
  id: Scalars['ID']
  name: Scalars['String']
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type Mutation = {
  __typename?: 'Mutation'
  /** Update Account Information */
  accountUpdate?: Maybe<AccountUpdatePayload>
  /** Create a Plaid Item from a successful Link submission */
  plaidItemCreate?: Maybe<PlaidItemCreatePayload>
  /** Delete a Plaid Item */
  plaidItemDelete?: Maybe<PlaidItemDeletePayload>
  /** Create a Link token to configure an instance of Link */
  plaidLinkTokenCreate?: Maybe<PlaidLinkTokenCreatePayload>
  /** Create a Link token to configure an instance of Link in Update Mode */
  plaidLinkTokenCreateForUpdate?: Maybe<PlaidLinkTokenCreateForUpdatePayload>
  /** Create a Plaid Processor token suitable for sending to one of Plaid's integration partners */
  plaidProcessorTokenCreate?: Maybe<PlaidProcessorTokenCreatePayload>
  /** Update Profile Information */
  profileUpdate?: Maybe<ProfileUpdatePayload>
  /** Register a recurring event like a bill payment, paycheck or transfer */
  recurrenceCreate?: Maybe<RecurrenceCreatePayload>
  /** Update an existing recurring event like a bill payment, paycheck or transfer */
  recurrenceUpdate?: Maybe<RecurrenceUpdatePayload>
  /** Create a RoundUp */
  roundUpCreate?: Maybe<RoundUpCreatePayload>
  /** Pause a RoundUp */
  roundUpPause?: Maybe<RoundUpPausePayload>
  /** Resume a RoundUp */
  roundUpResume?: Maybe<RoundUpResumePayload>
  /** Set the funding account for a RoundUp */
  roundUpSetFundingAccount?: Maybe<RoundUpSetFundingAccountPayload>
  /** Set the RoundUp start time */
  roundUpSetStartTime?: Maybe<RoundUpSetStartTimePayload>
  /** Add Accounts to a RoundUp */
  roundUpSubscribedAccountsAdd?: Maybe<RoundUpSubscribedAccountsAddPayload>
  /** Remove Accounts from a RoundUp */
  roundUpSubscribedAccountsRemove?: Maybe<RoundUpSubscribedAccountsRemovePayload>
  /** Update Transaction Information */
  transactionUpdate?: Maybe<TransactionUpdatePayload>
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationAccountUpdateArgs = {
  input: AccountUpdateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationPlaidItemCreateArgs = {
  input: PlaidItemCreateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationPlaidItemDeleteArgs = {
  input: PlaidItemDeleteInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationPlaidLinkTokenCreateArgs = {
  input: PlaidLinkTokenCreateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationPlaidLinkTokenCreateForUpdateArgs = {
  input: PlaidLinkTokenCreateForUpdateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationPlaidProcessorTokenCreateArgs = {
  input: PlaidProcessorTokenCreateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationProfileUpdateArgs = {
  input: ProfileUpdateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRecurrenceCreateArgs = {
  input: RecurrenceCreateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRecurrenceUpdateArgs = {
  input: RecurrenceUpdateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpCreateArgs = {
  input: RoundUpCreateInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpPauseArgs = {
  input: RoundUpPauseInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpResumeArgs = {
  input: RoundUpResumeInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpSetFundingAccountArgs = {
  input: RoundUpSetFundingAccountInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpSetStartTimeArgs = {
  input: RoundUpSetStartTimeInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpSubscribedAccountsAddArgs = {
  input: RoundUpSubscribedAccountsAddInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationRoundUpSubscribedAccountsRemoveArgs = {
  input: RoundUpSubscribedAccountsRemoveInput
}

/** The top-level Mutation type. Mutations are used to make requests that create or modify data. */
export type MutationTransactionUpdateArgs = {
  input: TransactionUpdateInput
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo'
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>
}

/** Represents a Plaid API Error */
export type PlaidApiError = {
  __typename?: 'PlaidAPIError'
  /** The particular error code */
  code: Scalars['String']
  /** A user-friendly representation of the error code */
  displayMessage?: Maybe<Scalars['String']>
  /** A developer-friendly representation of the error code */
  message: Scalars['String']
  /** A unique identifying the request, to be used for troubleshooting purposes */
  requestId?: Maybe<Scalars['String']>
  /** A broad categorization of the error */
  type: Scalars['String']
}

/** Plaid Account Data */
export type PlaidAccount = {
  __typename?: 'PlaidAccount'
  /** Plaid’s unique identifier for the account */
  accountId: Scalars['String']
  /** A set of fields describing the balance for an account. */
  balances: PlaidAccountBalances
  /**
   * The last 2-4 alphanumeric characters of an account's official account number.
   * Note that the mask may be non-unique between an Item's accounts, and it may
   * also not match the mask that the bank displays to the user.
   */
  mask?: Maybe<Scalars['String']>
  /** The name of the account, either assigned by the user or by the financial institution itself */
  name: Scalars['String']
  /** The official name of the account as given by the financial institution */
  officialName?: Maybe<Scalars['String']>
  /**
   * Possible values: 401a, 401k, 403B, 457b, 529, brokerage, cash isa, education
   * savings account, gic, health reimbursement arrangement, hsa, isa, ira, lif,
   * lira, lrif, lrsp, non-taxable brokerage account, other, prif, rdsp, resp,
   * rlif, rrif, pension, profit sharing plan, retirement, roth, roth 401k, rrsp,
   * sep ira, simple ira, sipp, stock plan, thrift savings plan, tfsa, trust, ugma,
   * utma, variable annuity, credit card, paypal, cd, checking, savings, money
   * market, prepaid, auto, commercial, construction, consumer, home, home equity,
   * loan, mortgage, overdraft, line of credit, student, cash management, keogh,
   * mutual fund, recurring, rewards, safe deposit, sarsep, null
   */
  subtype?: Maybe<Scalars['String']>
  /** Possible values: investment, credit, depository, loan, brokerage, other */
  type: Scalars['String']
  /**
   * The current verification status of an Auth Item initiated through Automated or
   * Manual micro-deposits.  Returned for Auth Items only.
   * Possible values: pending_automatic_verification, pending_manual_verification,
   * manually_verified, verification_expired, verification_failed
   */
  verificationStatus?: Maybe<Scalars['String']>
}

/** Plaid Account Balances Data */
export type PlaidAccountBalances = {
  __typename?: 'PlaidAccountBalances'
  /** The amount of funds available to be withdrawn from the account, as determined by the financial institution. */
  available?: Maybe<Scalars['Float']>
  /** The total amount of funds in or owed by the account. */
  current: Scalars['Float']
  /** The ISO-4217 currency code of the balance. Always null if unofficial_currency_code is non-null. */
  isoCurrencyCode?: Maybe<Scalars['String']>
  /** For credit-type accounts, this represents the credit limit. */
  limit?: Maybe<Scalars['Float']>
  /**
   * The unofficial currency code associated with the balance. Always null if
   * iso_currency_code is non-null. Unofficial currency codes are used for
   * currencies that do not have official ISO currency codes, such as
   * cryptocurrencies and the currencies of certain countries.
   */
  unofficialCurrencyCode?: Maybe<Scalars['String']>
}

/** Represents a Plaid item */
export type PlaidItem = {
  __typename?: 'PlaidItem'
  /** Accounts */
  accounts: Array<Account>
  /** Number of accounts */
  accountsCount: Scalars['Int']
  /** Plaid Item ID */
  id: Scalars['ID']
  /** Institution logo */
  logo?: Maybe<Image>
  /** Name of the Plaid Item */
  name: Scalars['String']
  /** Item status */
  status: PlaidItemStatus
  /** Last sync time */
  syncedAt?: Maybe<Scalars['DateTime']>
  /** Number of transactions */
  transactionsCount: Scalars['Int']
}

/** Autogenerated input type of PlaidItemCreate */
export type PlaidItemCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** The `metadata` object from Plaid Link's `onSuccess` callback */
  metadata: Scalars['JSON']
  /** The `public_token` string from Plaid Link's `onSuccess` callback */
  publicToken: Scalars['String']
}

/** Autogenerated return type of PlaidItemCreate */
export type PlaidItemCreatePayload = {
  __typename?: 'PlaidItemCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Plaid API Error */
  errors?: Maybe<Array<PlaidApiError>>
  /** Plaid Item */
  record?: Maybe<PlaidItem>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of PlaidItemDelete */
export type PlaidItemDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of Plaid Item to delete */
  id: Scalars['ID']
}

/** Autogenerated return type of PlaidItemDelete */
export type PlaidItemDeletePayload = {
  __typename?: 'PlaidItemDeletePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Plaid API Error */
  errors?: Maybe<Array<PlaidApiError>>
  /** Plaid Item */
  record?: Maybe<PlaidItem>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Represents the sync status of a Plaid Item */
export enum PlaidItemStatus {
  /** Needs reconnecting */
  Disconnected = 'DISCONNECTED',
  /** In an error state */
  Error = 'ERROR',
  /** Successfully synced */
  Synced = 'SYNCED',
  /** Currently syncing */
  Syncing = 'SYNCING',
}

/** Autogenerated return type of PlaidItemUpdated */
export type PlaidItemUpdatedPayload = {
  __typename?: 'PlaidItemUpdatedPayload'
  record?: Maybe<PlaidItem>
}

export type PlaidLinkAccountFiltersCreditAccountSubtypesInput = {
  accountSubtypes: Array<Scalars['String']>
}

export type PlaidLinkAccountFiltersDepositoryAccountSubtypesInput = {
  accountSubtypes: Array<Scalars['String']>
}

export type PlaidLinkAccountFiltersInput = {
  credit?: Maybe<PlaidLinkAccountFiltersCreditAccountSubtypesInput>
  depository?: Maybe<PlaidLinkAccountFiltersDepositoryAccountSubtypesInput>
}

/** Represents a Link token */
export type PlaidLinkToken = {
  __typename?: 'PlaidLinkToken'
  /** Expiration time of the `link_token` */
  expiration: Scalars['DateTime']
  /** A `link_token` that can be supplied to initialize Plaid Link */
  linkToken: Scalars['ID']
}

/** Autogenerated input type of PlaidLinkTokenCreateForUpdate */
export type PlaidLinkTokenCreateForUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** An array of Plaid-supported country codes using ISO-3166-1 alpha-2 country code standard */
  countryCodes?: Maybe<Array<Scalars['String']>>
  /** The language that Link should be displayed in. Defaults to your Quiltt app's default language will be used */
  language?: Maybe<Scalars['String']>
  /** The name of the Link customization from the Plaid Dashboard to be applied to Link */
  linkCustomizationName?: Maybe<Scalars['String']>
  /** The ID of the PlaidItem to update */
  plaidItemId: Scalars['ID']
}

/** Autogenerated return type of PlaidLinkTokenCreateForUpdate */
export type PlaidLinkTokenCreateForUpdatePayload = {
  __typename?: 'PlaidLinkTokenCreateForUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Plaid API Error */
  errors?: Maybe<Array<PlaidApiError>>
  /** Link token */
  record?: Maybe<PlaidLinkToken>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of PlaidLinkTokenCreate */
export type PlaidLinkTokenCreateInput = {
  accountFilters?: Maybe<PlaidLinkAccountFiltersInput>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** An array of Plaid-supported country codes using ISO-3166-1 alpha-2 country code standard */
  countryCodes?: Maybe<Array<Scalars['String']>>
  /** The language that Link should be displayed in. Defaults to your Quiltt app's default language will be used */
  language?: Maybe<Scalars['String']>
  /** The name of the Link customization from the Plaid Dashboard to be applied to Link */
  linkCustomizationName?: Maybe<Scalars['String']>
  /** List of products to use with Link */
  products: Array<Scalars['String']>
}

/** Autogenerated return type of PlaidLinkTokenCreate */
export type PlaidLinkTokenCreatePayload = {
  __typename?: 'PlaidLinkTokenCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Plaid API Error */
  errors?: Maybe<Array<PlaidApiError>>
  /** Link token */
  record?: Maybe<PlaidLinkToken>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Represents a Processor token */
export type PlaidProcessorToken = {
  __typename?: 'PlaidProcessorToken'
  /** The `processor_token` that can then be used by the Plaid partner to make API requests */
  processorToken: Scalars['ID']
}

/** Autogenerated input type of PlaidProcessorTokenCreate */
export type PlaidProcessorTokenCreateInput = {
  /**
   * The Plaid `account_id` obtained from the onSuccess callback in Plaid Link or,
   * the `accountId` from the PlaidAccount source in Quiltt
   */
  accountId: Scalars['ID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** The ID of the Plaid Item data is being requested for */
  plaidItemId: Scalars['ID']
  /** The processor you are integrating with */
  processor: Scalars['String']
}

/** Autogenerated return type of PlaidProcessorTokenCreate */
export type PlaidProcessorTokenCreatePayload = {
  __typename?: 'PlaidProcessorTokenCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Plaid API Error */
  errors?: Maybe<Array<PlaidApiError>>
  /** Processor token */
  record?: Maybe<PlaidProcessorToken>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Plaid Transaction Data */
export type PlaidTransaction = {
  __typename?: 'PlaidTransaction'
  /** The ID of the account in which this transaction occurred. */
  accountId: Scalars['String']
  /** The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
  accountOwner?: Maybe<Scalars['String']>
  /**
   * The settled value of the transaction, denominated in the account's currency,
   * as stated in iso_currency_code or unofficial_currency_code. Positive values
   * when money moves out of the account; negative values when money moves in. For
   * example, debit card purchases are positive; credit card payments, direct
   * deposits, and refunds are negative.
   */
  amount: Scalars['Float']
  /** The date that the transaction was authorized. Dates are returned in an ISO 8601 format ( YYYY-MM-DD ). */
  authorizedDate?: Maybe<Scalars['String']>
  /** Date and time when a transaction was authorized in ISO 8601 format ( YYYY-MM-DDTHH:mm:ssZ ). */
  authorizedDatetime?: Maybe<Scalars['String']>
  /** A hierarchical array of the categories to which this transaction belongs. */
  category?: Maybe<Array<Scalars['String']>>
  /** The ID of the category to which this transaction belongs. */
  categoryId: Scalars['String']
  /**
   * For pending transactions, the date that the transaction occurred; for posted
   * transactions, the date that the transaction posted. Both dates are returned in
   * an ISO 8601 format ( YYYY-MM-DD ).
   */
  date: Scalars['Date']
  /** Date and time when a transaction was posted in ISO 8601 format ( YYYY-MM-DDTHH:mm:ssZ ). */
  datetime?: Maybe<Scalars['DateTime']>
  /** The ISO-4217 currency code of the transaction. Always null if unofficial_currency_code is non-null. */
  isoCurrencyCode?: Maybe<Scalars['String']>
  /** A representation of where a transaction took place */
  location: PlaidTransactionLocation
  /** The merchant name, as extracted by Plaid from the name field. */
  merchantName?: Maybe<Scalars['String']>
  /** The merchant name or transaction description. */
  name: Scalars['String']
  /** The channel used to make a payment. Possible values: online, in store, other */
  paymentChannel: Scalars['String']
  /**
   * Transaction information specific to inter-bank transfers. If the transaction
   * was not an inter-bank transfer, all fields will be null.
   */
  paymentMeta: PlaidTransactionPaymentMeta
  /**
   * When true, identifies the transaction as pending or unsettled. Pending
   * transaction details (name, type, amount, category ID) may change before they are settled.
   */
  pending: Scalars['Boolean']
  /** The ID of a posted transaction's associated pending transaction, where applicable. */
  pendingTransactionId?: Maybe<Scalars['String']>
  /**
   * An identifier classifying the transaction type. Possible values: adjustment,
   * atm, bank charge, bill payment, cash, cashback, cheque, direct debit,
   * interest, purchase, standing order, transfer, null
   */
  transactionCode?: Maybe<Scalars['String']>
  /** The unique ID of the transaction. */
  transactionId: Scalars['String']
  /** API Source */
  type: SourceTypes
  /**
   * The unofficial currency code associated with the transaction. Always null if
   * iso_currency_code is non-null. Unofficial currency codes are used for
   * currencies that do not have official ISO currency codes, such as
   * cryptocurrencies and the currencies of certain countries.
   */
  unofficialCurrencyCode?: Maybe<Scalars['String']>
}

/** Plaid Transaction Data */
export type PlaidTransactionLocation = {
  __typename?: 'PlaidTransactionLocation'
  /** The street address where the transaction occurred. */
  address?: Maybe<Scalars['String']>
  /** The city where the transaction occurred. */
  city?: Maybe<Scalars['String']>
  /** The ISO 3166-1 alpha-2 country code where the transaction occurred. */
  country?: Maybe<Scalars['String']>
  /** The latitude where the transaction occurred. */
  lat?: Maybe<Scalars['Float']>
  /** The longitude where the transaction occurred. */
  lon?: Maybe<Scalars['Float']>
  /** The postal code where the transaction occurred. */
  postalCode?: Maybe<Scalars['String']>
  /** The region or state where the transaction occurred. */
  region?: Maybe<Scalars['String']>
  /** The merchant defined store number where the transaction occurred. */
  storeNumber?: Maybe<Scalars['String']>
}

/** Plaid Transaction PaymentMeta Data */
export type PlaidTransactionPaymentMeta = {
  __typename?: 'PlaidTransactionPaymentMeta'
  /** The party initiating a wire transfer. Will be null if the transaction is not a wire transfer. */
  byOrderOf?: Maybe<Scalars['String']>
  /** For transfers, the party that is receiving the transaction. */
  payee?: Maybe<Scalars['String']>
  /** For transfers, the party that is paying the transaction. */
  payer?: Maybe<Scalars['String']>
  /** The type of transfer, e.g. 'ACH' */
  paymentMethod?: Maybe<Scalars['String']>
  /** The name of the payment processor */
  paymentProcessor?: Maybe<Scalars['String']>
  /** The ACH PPD ID for the payer. */
  ppdId?: Maybe<Scalars['String']>
  /** The payer-supplied description of the transfer. */
  reason?: Maybe<Scalars['String']>
  /** The transaction reference number supplied by the financial institution. */
  referenceNumber?: Maybe<Scalars['String']>
}

/** Represents a Profile */
export type Profile = {
  __typename?: 'Profile'
  /** Email */
  email?: Maybe<Scalars['String']>
  /** ID */
  id: Scalars['ID']
  /** Customizable metadata */
  metadata?: Maybe<Scalars['JSON']>
  /** Name */
  name?: Maybe<Scalars['String']>
  /** Cellphone */
  phone?: Maybe<Scalars['String']>
}

/** Autogenerated input type of ProfileUpdate */
export type ProfileUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Email */
  email?: Maybe<Scalars['String']>
  /** Customizable metadata */
  metadata?: Maybe<Scalars['JSON']>
  /** Name */
  name?: Maybe<Scalars['String']>
  /** Cellphone in E164 Format */
  phone?: Maybe<Scalars['String']>
}

/** Autogenerated return type of ProfileUpdate */
export type ProfileUpdatePayload = {
  __typename?: 'ProfileUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated Profile Information */
  record?: Maybe<Profile>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** The top-level Query type. Queries are used to fetch data. */
export type Query = {
  __typename?: 'Query'
  /** Look up an Account by its ID */
  account?: Maybe<Account>
  /** Get a list of a person's Accounts, sorted by type */
  accounts?: Maybe<Array<Account>>
  /** Get list of Categories, sorted by name */
  categories: Array<Category>
  merchants?: Maybe<Array<Merchant>>
  /** Look up a Plaid Item by its ID */
  plaidItem?: Maybe<PlaidItem>
  /** Get a list of the user's Plaid Items */
  plaidItems?: Maybe<Array<PlaidItem>>
  /** Get profile information for the authenticated user */
  profile?: Maybe<Profile>
  /** Look up a Recurrence by its ID */
  recurrence?: Maybe<Recurrence>
  /** Get a list of the user's Recurrences, sorted by next payment date */
  recurrences?: Maybe<Array<Recurrence>>
  /** Look up a RoundUp by its ID */
  roundUp?: Maybe<RoundUp>
  /** Get a list of the user's RoundUps */
  roundUps?: Maybe<Array<RoundUp>>
  /** Look up a Transaction by its ID */
  transaction?: Maybe<Transaction>
  /** Get a cursor paginated list of the user's Transactions, sorted by descending date */
  transactionsConnection: TransactionConnection
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryAccountArgs = {
  id: Scalars['ID']
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryMerchantsArgs = {
  name?: Maybe<Scalars['String']>
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryPlaidItemArgs = {
  id: Scalars['ID']
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryRecurrenceArgs = {
  id: Scalars['ID']
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryRoundUpArgs = {
  id: Scalars['ID']
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryTransactionArgs = {
  id: Scalars['ID']
}

/** The top-level Query type. Queries are used to fetch data. */
export type QueryTransactionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  filter?: Maybe<TransactionFilter>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  sort?: Maybe<TransactionSort>
}

/** Represents a recurring set of transactions */
export type Recurrence = {
  __typename?: 'Recurrence'
  entryType: RecurrenceEntryTypes
  frequency: RecurrenceFrequency
  /** ID */
  id: Scalars['ID']
  /** Name */
  name?: Maybe<Scalars['String']>
  /** State */
  state: LedgerState
  /**
   * Status
   * @deprecated Use `state` instead.
   */
  status: LedgerStatus
  /** The next projected payment */
  transactionNext?: Maybe<Transaction>
  /** A limited list of transactions. Use `transactionsConnection` for a full paginated list. */
  transactions: Array<Transaction>
  /** Cursor-based pagination transactions */
  transactionsConnection: TransactionConnection
}

/** Represents a recurring set of transactions */
export type RecurrenceTransactionsArgs = {
  filter?: Maybe<TransactionFilter>
  limit?: Scalars['Int']
  sort?: Maybe<TransactionSort>
}

/** Represents a recurring set of transactions */
export type RecurrenceTransactionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  filter?: Maybe<TransactionFilter>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  sort?: Maybe<TransactionSort>
}

/** Autogenerated input type of RecurrenceCreate */
export type RecurrenceCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  frequency: RecurrenceFrequency
  transactionId: Scalars['ID']
}

/** Autogenerated return type of RecurrenceCreate */
export type RecurrenceCreatePayload = {
  __typename?: 'RecurrenceCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated bill */
  record?: Maybe<Recurrence>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Whether the Recurrence represent money being advanced into or withdrawn from the account. */
export enum RecurrenceEntryTypes {
  /** a set of entries recording money being advanced into the account */
  Inflow = 'INFLOW',
  /** a set of entries recording money being withdrawn from the account */
  Outflow = 'OUTFLOW',
}

/** Represents the frequency of a recurring event */
export enum RecurrenceFrequency {
  /** Every year */
  Annually = 'ANNUALLY',
  /** Every daily */
  Daily = 'DAILY',
  /** Every two weeks */
  Fortnightly = 'FORTNIGHTLY',
  /** Every month */
  Monthly = 'MONTHLY',
  /** Every three months */
  Quarterly = 'QUARTERLY',
  /** Every six months */
  Semiannually = 'SEMIANNUALLY',
  /** Twice per month, 1st & 15th */
  SemimonthlyEarly = 'SEMIMONTHLY_EARLY',
  /** Twice per month, 15th & End of Month */
  SemimonthlyLate = 'SEMIMONTHLY_LATE',
  /** Every thirty days */
  ThirtyDays = 'THIRTY_DAYS',
  /** Every week */
  Weekly = 'WEEKLY',
}

/** Autogenerated input type of RecurrenceUpdate */
export type RecurrenceUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  frequency: RecurrenceFrequency
}

/** Autogenerated return type of RecurrenceUpdate */
export type RecurrenceUpdatePayload = {
  __typename?: 'RecurrenceUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated bill */
  record?: Maybe<Recurrence>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Represents a RoundUp */
export type RoundUp = {
  __typename?: 'RoundUp'
  /** Eligible accounts available for this RoundUp */
  availableAccounts: Array<Account>
  /** Balance */
  balance: LedgerBalance
  /** Source or Funding account for this RoundUp */
  fundingAccount?: Maybe<Account>
  /** ID */
  id: Scalars['ID']
  /** State */
  state: LedgerState
  /**
   * Status
   * @deprecated Use `state` instead.
   */
  status: LedgerStatus
  /** Accounts subscribed to this RoundUp */
  subscribedAccounts: Array<Account>
  /** A limited list of transactions. Use `transactionsConnection` for a full paginated list. */
  transactions: Array<Transaction>
  /** Cursor-based pagination transactions */
  transactionsConnection: TransactionConnection
}

/** Represents a RoundUp */
export type RoundUpBalanceArgs = {
  filter?: Maybe<TransactionFilter>
}

/** Represents a RoundUp */
export type RoundUpTransactionsArgs = {
  filter?: Maybe<TransactionFilter>
  limit?: Scalars['Int']
  sort?: Maybe<TransactionSort>
}

/** Represents a RoundUp */
export type RoundUpTransactionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  filter?: Maybe<TransactionFilter>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  sort?: Maybe<TransactionSort>
}

/** Autogenerated input type of RoundUpCreate */
export type RoundUpCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the funding account */
  fundingAccountId?: Maybe<Scalars['ID']>
  /** IDs of subscribed accounts */
  subscribedAccountIds?: Maybe<Array<Scalars['ID']>>
}

/** Autogenerated return type of RoundUpCreate */
export type RoundUpCreatePayload = {
  __typename?: 'RoundUpCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Created RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of RoundUpPause */
export type RoundUpPauseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the RoundUp */
  id: Scalars['ID']
}

/** Autogenerated return type of RoundUpPause */
export type RoundUpPausePayload = {
  __typename?: 'RoundUpPausePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Paused RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of RoundUpResume */
export type RoundUpResumeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the RoundUp */
  id: Scalars['ID']
}

/** Autogenerated return type of RoundUpResume */
export type RoundUpResumePayload = {
  __typename?: 'RoundUpResumePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Resumed RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of RoundUpSetFundingAccount */
export type RoundUpSetFundingAccountInput = {
  /** ID of the new funding account to use */
  accountId: Scalars['ID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the RoundUp */
  id: Scalars['ID']
}

/** Autogenerated return type of RoundUpSetFundingAccount */
export type RoundUpSetFundingAccountPayload = {
  __typename?: 'RoundUpSetFundingAccountPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of RoundUpSetStartTime */
export type RoundUpSetStartTimeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the RoundUp */
  id: Scalars['ID']
  /** Time to start rounding up at */
  startAt: Scalars['DateTime']
}

/** Autogenerated return type of RoundUpSetStartTime */
export type RoundUpSetStartTimePayload = {
  __typename?: 'RoundUpSetStartTimePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of RoundUpSubscribedAccountsAdd */
export type RoundUpSubscribedAccountsAddInput = {
  /** IDs of added Accounts */
  accountIds: Array<Scalars['ID']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the RoundUp */
  id: Scalars['ID']
}

/** Autogenerated return type of RoundUpSubscribedAccountsAdd */
export type RoundUpSubscribedAccountsAddPayload = {
  __typename?: 'RoundUpSubscribedAccountsAddPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

/** Autogenerated input type of RoundUpSubscribedAccountsRemove */
export type RoundUpSubscribedAccountsRemoveInput = {
  /** IDs of removed Accounts */
  accountIds: Array<Scalars['ID']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the RoundUp */
  id: Scalars['ID']
}

/** Autogenerated return type of RoundUpSubscribedAccountsRemove */
export type RoundUpSubscribedAccountsRemovePayload = {
  __typename?: 'RoundUpSubscribedAccountsRemovePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated RoundUp */
  record?: Maybe<RoundUp>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

export type SourceAccounts = PlaidAccount

export type SourceTransactions = PlaidTransaction

/** Represents the source of the data */
export enum SourceTypes {
  /** Plaid connection */
  Plaid = 'PLAID',
  /** QRails connection */
  Qrails = 'QRAILS',
}

/** The top-level Subscription type. Subscriptions are used to watch for events emitted from the server. */
export type Subscription = {
  __typename?: 'Subscription'
  /** A plaid item was updated */
  plaidItemUpdated: PlaidItemUpdatedPayload
}

/** The top-level Subscription type. Subscriptions are used to watch for events emitted from the server. */
export type SubscriptionPlaidItemUpdatedArgs = {
  id: Scalars['ID']
}

/** Represents a Transaction */
export type Transaction = {
  __typename?: 'Transaction'
  /** Transaction account */
  account: Account | Partial<Account>
  /** Amount */
  amount: Scalars['Float']
  /** Date of Record */
  date: Scalars['Date']
  /** Description or Line Item Name */
  description: Scalars['String']
  /** CREDIT or DEBIT */
  entryType: TransactionEntryTypes
  /** ID */
  id: Scalars['ID']
  /** Customizable metadata */
  metadata?: Maybe<Scalars['JSON']>
  /** API Data Source */
  source?: Maybe<SourceTransactions>
  /** API Data Sources */
  sources?: Maybe<Array<SourceTransactions>>
  /** Status */
  status: TransactionStatus
}

/** Represents a Transaction */
export type TransactionSourceArgs = {
  type: SourceTypes
}

/** Represents a Transaction */
export type TransactionSourcesArgs = {
  types?: Maybe<Array<SourceTypes>>
}

/** The connection type for Transaction. */
export type TransactionConnection = {
  __typename?: 'TransactionConnection'
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionEdge>>>
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Transaction>>>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type TransactionEdge = {
  __typename?: 'TransactionEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node?: Maybe<Transaction>
}

/** Whether the Transaction is a CREDIT or DEBIT */
export enum TransactionEntryTypes {
  /** an entry recording money being advanced into the account */
  Credit = 'CREDIT',
  /** an entry recording money being withdrawn from the account */
  Debit = 'DEBIT',
}

/** Options for Filtering Transactions */
export type TransactionFilter = {
  /** Amount */
  amount?: Maybe<Scalars['Float']>
  /** Amount greater than */
  amount_gt?: Maybe<Scalars['Float']>
  /** Amount greater than or equal to */
  amount_gte?: Maybe<Scalars['Float']>
  /** Amount less than */
  amount_lt?: Maybe<Scalars['Float']>
  /** Amount less than or equal to */
  amount_lte?: Maybe<Scalars['Float']>
  /** Date */
  date?: Maybe<Scalars['Date']>
  /** Date greater than */
  date_gt?: Maybe<Scalars['Date']>
  /** Date greater than or equal to */
  date_gte?: Maybe<Scalars['Date']>
  /** Date less than */
  date_lt?: Maybe<Scalars['Date']>
  /** Date less than or equal to */
  date_lte?: Maybe<Scalars['Date']>
}

/** Options for Sorting Transactions */
export enum TransactionSort {
  /** Oldest First, Pending Last */
  DateAsc = 'DATE_ASC',
  /** Newest First, Pending First */
  DateDesc = 'DATE_DESC',
}

/** Represents the pending, posted, or projected status for a transaction */
export enum TransactionStatus {
  /** Awaiting decision or settlement, may be replaced, updated, or removed */
  Pending = 'PENDING',
  /** Announced or published as conclusive */
  Posted = 'POSTED',
  /** Estimated or forecast on the basis of current trends or data */
  Projected = 'PROJECTED',
}

/** Autogenerated input type of TransactionUpdate */
export type TransactionUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Customizable metadata */
  metadata?: Maybe<Scalars['JSON']>
}

/** Autogenerated return type of TransactionUpdate */
export type TransactionUpdatePayload = {
  __typename?: 'TransactionUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** List of errors from mutation */
  errors?: Maybe<Array<Error>>
  /** Updated Account Information */
  record?: Maybe<Account>
  /** Status of the mutation */
  success: Scalars['Boolean']
}

export type MerchantsQueryVariables = Exact<{
  name: Scalars['String']
}>

export type MerchantsQuery = { __typename?: 'Query' } & {
  merchants?: Maybe<Array<{ __typename?: 'Merchant' } & Pick<Merchant, 'name' | 'id'>>>
}

export type CategoriesQueryVariables = Exact<{ [key: string]: never }>

export type CategoriesQuery = { __typename?: 'Query' } & {
  categories: Array<
    { __typename?: 'Category' } & Pick<
      Category,
      'id' | 'name' | 'description' | 'emojiName' | 'emoji'
    >
  >
}

export type BillsQueryVariables = Exact<{ [key: string]: never }>

export type BillsQuery = { __typename?: 'Query' } & {
  recurrences?: Maybe<
    Array<
      { __typename?: 'Recurrence' } & Pick<Recurrence, 'id' | 'name' | 'frequency' | 'state'> & {
          transactionNext?: Maybe<
            { __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'date' | 'amount'>
          >
        }
    >
  >
}

export type BillDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type BillDetailQuery = { __typename?: 'Query' } & {
  recurrence?: Maybe<
    { __typename?: 'Recurrence' } & Pick<Recurrence, 'id' | 'name' | 'frequency' | 'state'> & {
        transactionNext?: Maybe<
          { __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'date' | 'amount'>
        >
        transactions: Array<
          { __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'amount' | 'date'>
        >
      }
  >
}

export type BillTemplateQueryVariables = Exact<{
  categoryId?: Maybe<Scalars['ID']>
  merchantId?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}>

export type BillTemplateQuery = { __typename?: 'Query' } & {
  recurrences?: Maybe<Array<{ __typename?: 'Recurrence' } & Pick<Recurrence, 'name'>>>
}

export type CreateBillMutationVariables = Exact<{
  input: RecurrenceCreateInput
}>

export type CreateBillMutation = { __typename?: 'Mutation' } & {
  recurrenceCreate?: Maybe<
    { __typename?: 'RecurrenceCreatePayload' } & {
      record?: Maybe<
        { __typename?: 'Recurrence' } & Pick<Recurrence, 'id' | 'name' | 'frequency' | 'state'>
      >
      errors?: Maybe<Array<{ __typename?: 'Error' } & Pick<Error, 'message' | 'path'>>>
    }
  >
}

export type UpdateBillMutationVariables = Exact<{
  input: RecurrenceUpdateInput
}>

export type UpdateBillMutation = { __typename?: 'Mutation' } & {
  recurrenceUpdate?: Maybe<
    { __typename?: 'RecurrenceUpdatePayload' } & {
      record?: Maybe<
        { __typename?: 'Recurrence' } & Pick<Recurrence, 'id' | 'name' | 'frequency' | 'state'>
      >
      errors?: Maybe<Array<{ __typename?: 'Error' } & Pick<Error, 'message' | 'path'>>>
    }
  >
}

export type NextPaycheckQueryQueryVariables = Exact<{ [key: string]: never }>

export type NextPaycheckQueryQuery = { __typename?: 'Query' } & {
  profile?: Maybe<{ __typename?: 'Profile' } & Pick<Profile, 'name'>>
}

export type RoundUpActivateMutationVariables = Exact<{
  id: Scalars['ID']
  startAt: Scalars['DateTime']
  startOn?: Maybe<Scalars['Date']>
}>

export type RoundUpActivateMutation = { __typename?: 'Mutation' } & {
  roundUpSetStartTime?: Maybe<
    { __typename?: 'RoundUpSetStartTimePayload' } & Pick<RoundUpSetStartTimePayload, 'success'> & {
        record?: Maybe<
          { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
              balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
              transactionsConnection: { __typename?: 'TransactionConnection' } & {
                nodes?: Maybe<
                  Array<
                    Maybe<
                      { __typename?: 'Transaction' } & Pick<
                        Transaction,
                        'id' | 'date' | 'amount' | 'description'
                      >
                    >
                  >
                >
              }
            }
        >
      }
  >
}

export type RoundUpActivateDateSearchQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpActivateDateSearchQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        subscribedAccounts: Array<
          { __typename?: 'Account' } & Pick<Account, 'id'> & {
              transactions: Array<
                { __typename?: 'Transaction' } & Pick<
                  Transaction,
                  'id' | 'date' | 'amount' | 'status'
                >
              >
            }
        >
      }
  >
}

export type RoundUpsBankConnectionsAccountsListQueryVariables = Exact<{
  roundUpId: Scalars['ID']
  bankConnectionId: Scalars['ID']
}>

export type RoundUpsBankConnectionsAccountsListQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & Pick<Account, 'id'> & {
              balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
            }
        >
      }
  >
  plaidItem?: Maybe<
    { __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id' | 'name' | 'status' | 'syncedAt'> & {
        logo?: Maybe<{ __typename?: 'Image' } & Pick<Image, 'url'>>
        accounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id' | 'name'>>
      }
  >
}

export type RoundUpsBankConnectionsAccountsListItemQueryVariables = Exact<{
  roundUpId: Scalars['ID']
  accountId: Scalars['ID']
}>

export type RoundUpsBankConnectionsAccountsListItemQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & Pick<Account, 'id'> & {
              balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
            }
        >
        subscribedAccounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
        availableAccounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
      }
  >
  account?: Maybe<
    { __typename?: 'Account' } & Pick<Account, 'id' | 'name' | 'lastFourDigits'> & {
        balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
      }
  >
}

export type RoundUpsAccountsSubscribeMutationVariables = Exact<{
  id: Scalars['ID']
  accountId: Scalars['ID']
}>

export type RoundUpsAccountsSubscribeMutation = { __typename?: 'Mutation' } & {
  roundUpSubscribedAccountsAdd?: Maybe<
    { __typename?: 'RoundUpSubscribedAccountsAddPayload' } & {
      record?: Maybe<
        { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
            subscribedAccounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
            availableAccounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
          }
      >
    }
  >
}

export type RoundUpsAccountsUnsubscribeMutationVariables = Exact<{
  id: Scalars['ID']
  accountId: Scalars['ID']
}>

export type RoundUpsAccountsUnsubscribeMutation = { __typename?: 'Mutation' } & {
  roundUpSubscribedAccountsRemove?: Maybe<
    { __typename?: 'RoundUpSubscribedAccountsRemovePayload' } & {
      record?: Maybe<
        { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
            subscribedAccounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
            availableAccounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
          }
      >
    }
  >
}

export type RoundUpsBankConnectionsAddFundingMutationVariables = Exact<{
  roundUpId: Scalars['ID']
  accountId: Scalars['ID']
}>

export type RoundUpsBankConnectionsAddFundingMutation = { __typename?: 'Mutation' } & {
  roundUpSetFundingAccount?: Maybe<
    { __typename?: 'RoundUpSetFundingAccountPayload' } & Pick<
      RoundUpSetFundingAccountPayload,
      'success'
    > & { record?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id'>> }
  >
  roundUpSubscribedAccountsAdd?: Maybe<
    { __typename?: 'RoundUpSubscribedAccountsAddPayload' } & Pick<
      RoundUpSubscribedAccountsAddPayload,
      'success'
    > & { record?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id'>> }
  >
}

export type RoundUpsBankConnectionsAddSubscriptionMutationVariables = Exact<{
  roundUpId: Scalars['ID']
  accountIds: Array<Scalars['ID']> | Scalars['ID']
}>

export type RoundUpsBankConnectionsAddSubscriptionMutation = { __typename?: 'Mutation' } & {
  roundUpSubscribedAccountsAdd?: Maybe<
    { __typename?: 'RoundUpSubscribedAccountsAddPayload' } & Pick<
      RoundUpSubscribedAccountsAddPayload,
      'success'
    > & { record?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id'>> }
  >
}

export type RoundUpsRecentActivityQueryVariables = Exact<{
  roundUpId: Scalars['ID']
  since: Scalars['Date']
}>

export type RoundUpsRecentActivityQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        recentActivity: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'current'>
      }
  >
}

export type RoundUpsBankConnectionsSummaryCardFooterQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpsBankConnectionsSummaryCardFooterQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & Pick<Account, 'id'> & {
              balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
            }
        >
      }
  >
}

export type RoundUpsBankConnectionsSummaryCardHeaderQueryVariables = Exact<{ [key: string]: never }>

export type RoundUpsBankConnectionsSummaryCardHeaderQuery = { __typename?: 'Query' } & {
  plaidItems?: Maybe<Array<{ __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id'>>>
}

export type RoundUpsBankConnectionsCardQueryVariables = Exact<{
  roundUpId: Scalars['ID']
  id: Scalars['ID']
}>

export type RoundUpsBankConnectionsCardQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id'>>
  plaidItem?: Maybe<
    { __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id' | 'name'> & {
        logo?: Maybe<{ __typename?: 'Image' } & Pick<Image, 'url'>>
      }
  >
}

export type RoundUpsBankConnectionsListQueryVariables = Exact<{
  roundUpId: Scalars['ID']
}>

export type RoundUpsBankConnectionsListQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & {
            balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
          } & AccountFragmentFragment
        >
      }
  >
  plaidItems?: Maybe<
    Array<
      { __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id' | 'name' | 'status' | 'syncedAt'> & {
          logo?: Maybe<{ __typename?: 'Image' } & Pick<Image, 'url'>>
        }
    >
  >
}

export type RoundUpsBankConnectionsListItemQueryVariables = Exact<{
  roundUpId: Scalars['ID']
  id: Scalars['ID']
}>

export type RoundUpsBankConnectionsListItemQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & {
            balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
          } & AccountFragmentFragment
        >
      }
  >
  plaidItem?: Maybe<
    { __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id' | 'name' | 'status' | 'syncedAt'> & {
        logo?: Maybe<{ __typename?: 'Image' } & Pick<Image, 'url'>>
      }
  >
}

export type RoundUpsBankConnectionsPageQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpsBankConnectionsPageQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & Pick<Account, 'id'> & {
              balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
            }
        >
      }
  >
  plaidItems?: Maybe<
    Array<
      { __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id'> & {
          accounts: Array<{ __typename?: 'Account' } & Pick<Account, 'id'>>
        }
    >
  >
}

export type RoundUpsPauseMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpsPauseMutation = { __typename?: 'Mutation' } & {
  roundUpPause?: Maybe<
    { __typename?: 'RoundUpPausePayload' } & {
      record?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id' | 'status'>>
    }
  >
}

export type RoundUpsResumeMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpsResumeMutation = { __typename?: 'Mutation' } & {
  roundUpResume?: Maybe<
    { __typename?: 'RoundUpResumePayload' } & {
      record?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id' | 'status'>>
    }
  >
}

export type RoundUpSummaryQueryVariables = Exact<{
  id: Scalars['ID']
  startOfWeek?: Maybe<Scalars['Date']>
}>

export type RoundUpSummaryQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        totalAmount: { __typename?: 'LedgerBalance' } & Pick<
          LedgerBalance,
          'id' | 'available' | 'current'
        >
        thisWeek: { __typename?: 'LedgerBalance' } & Pick<
          LedgerBalance,
          'id' | 'available' | 'current'
        >
      }
  >
}

export type RoundUpHistoryQueryVariables = Exact<{
  id: Scalars['ID']
  day0: Scalars['Date']
  day1: Scalars['Date']
  day2: Scalars['Date']
  day3: Scalars['Date']
  day4: Scalars['Date']
  day5: Scalars['Date']
  day6: Scalars['Date']
}>

export type RoundUpHistoryQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        day0: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
        day1: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
        day2: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
        day3: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
        day4: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
        day5: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
        day6: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'id' | 'available'>
      }
  >
}

export type RoundUpTransactionsQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpTransactionsQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id'> & {
        transactionsConnection: { __typename?: 'TransactionConnection' } & {
          edges?: Maybe<
            Array<
              Maybe<
                { __typename?: 'TransactionEdge' } & {
                  node?: Maybe<
                    { __typename?: 'Transaction' } & Pick<
                      Transaction,
                      'id' | 'date' | 'amount' | 'description'
                    >
                  >
                }
              >
            >
          >
        }
      }
  >
}

export type RoundUpsQueryVariables = Exact<{ [key: string]: never }>

export type RoundUpsQuery = { __typename?: 'Query' } & {
  roundUps?: Maybe<Array<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id'>>>
}

export type RoundUpHomeQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type RoundUpHomeQuery = { __typename?: 'Query' } & {
  roundUp?: Maybe<
    { __typename?: 'RoundUp' } & Pick<RoundUp, 'id' | 'status'> & {
        fundingAccount?: Maybe<
          { __typename?: 'Account' } & Pick<Account, 'id'> & {
              balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
            }
        >
      }
  >
}

export type CreateRoundUpMutationVariables = Exact<{ [key: string]: never }>

export type CreateRoundUpMutation = { __typename?: 'Mutation' } & {
  roundUpCreate?: Maybe<
    { __typename?: 'RoundUpCreatePayload' } & Pick<RoundUpCreatePayload, 'success'> & {
        record?: Maybe<{ __typename?: 'RoundUp' } & Pick<RoundUp, 'id' | 'status'>>
      }
  >
}

export type PlaidItemsQueryVariables = Exact<{ [key: string]: never }>

export type PlaidItemsQuery = { __typename?: 'Query' } & {
  plaidItems?: Maybe<Array<{ __typename?: 'PlaidItem' } & PlaidItemFragmentFragment>>
}

export type PlaidItemSyncStatusQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type PlaidItemSyncStatusQuery = { __typename?: 'Query' } & {
  plaidItem?: Maybe<{ __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id' | 'status' | 'syncedAt'>>
}

export type PlaidLinkTokenCreateMutationVariables = Exact<{
  input: PlaidLinkTokenCreateInput
}>

export type PlaidLinkTokenCreateMutation = { __typename?: 'Mutation' } & {
  plaidLinkTokenCreate?: Maybe<
    { __typename?: 'PlaidLinkTokenCreatePayload' } & {
      record?: Maybe<
        { __typename?: 'PlaidLinkToken' } & Pick<PlaidLinkToken, 'linkToken' | 'expiration'>
      >
      errors?: Maybe<
        Array<
          { __typename?: 'PlaidAPIError' } & Pick<
            PlaidApiError,
            'code' | 'type' | 'message' | 'requestId' | 'displayMessage'
          >
        >
      >
    }
  >
}

export type PlaidLinkTokenCreateForUpdateMutationVariables = Exact<{
  input: PlaidLinkTokenCreateForUpdateInput
}>

export type PlaidLinkTokenCreateForUpdateMutation = { __typename?: 'Mutation' } & {
  plaidLinkTokenCreateForUpdate?: Maybe<
    { __typename?: 'PlaidLinkTokenCreateForUpdatePayload' } & {
      record?: Maybe<
        { __typename?: 'PlaidLinkToken' } & Pick<PlaidLinkToken, 'linkToken' | 'expiration'>
      >
      errors?: Maybe<
        Array<
          { __typename?: 'PlaidAPIError' } & Pick<
            PlaidApiError,
            'code' | 'type' | 'message' | 'requestId' | 'displayMessage'
          >
        >
      >
    }
  >
}

export type PlaidItemCreateMutationVariables = Exact<{
  input: PlaidItemCreateInput
}>

export type PlaidItemCreateMutation = { __typename?: 'Mutation' } & {
  plaidItemCreate?: Maybe<
    { __typename?: 'PlaidItemCreatePayload' } & {
      record?: Maybe<{ __typename?: 'PlaidItem' } & PlaidItemFragmentFragment>
      errors?: Maybe<
        Array<{ __typename?: 'PlaidAPIError' } & Pick<PlaidApiError, 'displayMessage'>>
      >
    }
  >
}

export type PlaidItemUnlinkMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type PlaidItemUnlinkMutation = { __typename?: 'Mutation' } & {
  plaidItemDelete?: Maybe<
    { __typename?: 'PlaidItemDeletePayload' } & Pick<PlaidItemDeletePayload, 'success'> & {
        record?: Maybe<{ __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id'>>
      }
  >
}

export type PlaidItemUpdatedSubscriptionVariables = Exact<{
  id: Scalars['ID']
}>

export type PlaidItemUpdatedSubscription = { __typename?: 'Subscription' } & {
  plaidItemUpdated: { __typename?: 'PlaidItemUpdatedPayload' } & {
    record?: Maybe<{ __typename?: 'PlaidItem' } & PlaidItemFragmentFragment>
  }
}

export type ProfileFragmentFragment = { __typename?: 'Profile' } & Pick<
  Profile,
  'name' | 'email' | 'phone'
>

export type ProfileQueryVariables = Exact<{ [key: string]: never }>

export type ProfileQuery = { __typename?: 'Query' } & {
  profile?: Maybe<{ __typename?: 'Profile' } & ProfileFragmentFragment>
}

export type ProfileUpdateMutationVariables = Exact<{
  input: ProfileUpdateInput
}>

export type ProfileUpdateMutation = { __typename?: 'Mutation' } & {
  profileUpdate?: Maybe<
    { __typename?: 'ProfileUpdatePayload' } & {
      record?: Maybe<{ __typename?: 'Profile' } & ProfileFragmentFragment>
      errors?: Maybe<Array<{ __typename?: 'Error' } & Pick<Error, 'path' | 'message'>>>
    }
  >
}

export type AccountFragmentFragment = { __typename?: 'Account' } & Pick<
  Account,
  'id' | 'lastFourDigits' | 'name' | 'type'
> & { plaidItem?: Maybe<{ __typename?: 'PlaidItem' } & Pick<PlaidItem, 'id'>> }

export type PlaidItemFragmentFragment = { __typename?: 'PlaidItem' } & Pick<
  PlaidItem,
  'id' | 'name' | 'status' | 'syncedAt'
> & {
    logo?: Maybe<{ __typename?: 'Image' } & Pick<Image, 'url'>>
    accounts: Array<
      { __typename?: 'Account' } & Pick<Account, 'id' | 'name' | 'lastFourDigits' | 'type'> & {
          balance: { __typename?: 'LedgerBalance' } & Pick<LedgerBalance, 'current'>
        }
    >
  }
